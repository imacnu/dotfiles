# A valid snippet should starts with:
snippet afn "Arrow function"
(${1}) => {
	${2}
}
endsnippet

snippet log "Basic console log"
console.log('${1}')
endsnippet

snippet logg "Advanced console Log (params)"
console.log('${1}', ${2:''})
endsnippet

snippet deb "Debugger breakpoint"
//DEBUGGER
debugger;
endsnippet

snippet imp "Import Es modules" b
import ${1} from '${2}';
endsnippet

snippet impn "Import named Es modules" b
import {${1}} from '${2}';
endsnippet

snippet exp "Export Es modules" b
export ${1} from '${2}';
endsnippet

snippet expn "Export named Es modules" b
export {${1}} from '${2}';
endsnippet

"LIT ELEMENT
snippet $$ "Lit element bind template"
${1}
endsnippet

snippet $$$ "Lit element bind template"
\`${1}\`
endsnippet

snippet lif "Lit element conditional"
	${${1:this.bool} ? html \`${2}\` : html \`${3}\`}
endsnippet

snippet litloop "Lit element loop template"
${${1:items}.map(${2:item} => html \`
	${3}
\`
)}
endsnippet

snippet lithtml "Lit string template"
html \`
	${1}
\`

endsnippet

snippet dispatch "Dispatch custom event"
 this.dispatchEvent(new CustomEvent('${1:'event-name'}', {
 	detail: ${2:true},
 	bubbles: true,
 	composed: true
 }));
endsnippet


snippet litdemo "Lit element/html demo scaffold" 
      <bbva-core-demo-case heading="${1}">
        <template>
          <script type="module">
            const { html, render, ${2} } = window.DemoHelpers;
            const examples = () => html `\${3}\`;
            render(examples(), document.querySelector('.demo'));
          </script>
          <div class="demo"></div>
          </script>
        </template>
      </bbva-core-demo-case>
endsnippet


#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
